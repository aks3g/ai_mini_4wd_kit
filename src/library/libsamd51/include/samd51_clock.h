/*
 * samd51_clock.h
 *
 * Created: 2019/03/10
 * Copyright ? 2019 Kiyotaka Akasaka. All rights reserved.
 */ 


#ifndef SAMD51_CLOCK_H_
#define SAMD51_CLOCK_H_

#include <stdint.h>

typedef enum SAMD51_GCLK_SRC_t
{
	SAMD51_GCLK_SRC_XOSC0 = 0,
	SAMD51_GCLK_SRC_XOSC1 = 1,
	SAMD51_GCLK_SRC_GCLK_IN = 2,
	SAMD51_GCLK_SRC_GCLK_GEN1 = 3,
	SAMD51_GCLK_SRC_OSCULP32K = 4,
	SAMD51_GCLK_SRC_XOSC32k = 5,
	SAMD51_GCLK_SRC_DFLL = 6,
	SAMD51_GCLK_SRC_DPLL0 = 7,
	SAMD51_GCLK_SRC_DPLL1 = 8,
} SAMD51_GCLK_SRC;

typedef enum SAMD51_GCLK_DIV_MODE_t
{
	SAMD51_GCLK_DIV_NORMAL = 0,
	SAMD51_GCLK_DIV_POWER = 1
} SAMD51_GCLK_DIV_MODE;

typedef enum SAMD51_PERIPHERAL_CHANNEL_t
{
	SAMD51_GCLK_OSCCTRL_DFLL48		= 0,
	SAMD51_GCLK_OSCCTRL_FDPLL0		= 1,
	SAMD51_GCLK_OSCCTRL_FDPLL1		= 2,
	SAMD51_GCLK_OSCCTRL_FDPLL_32K	= 3,	//J GCLK_XXX_SLOWÇ‡Ç±Ç±Ç≈ê›íËÇ≥ÇÍÇÈÇÊ
	SAMD51_GCLK_EIC					= 4,
	SAMD51_GCLK_FREQM_MSR			= 5,
	SAMD51_GCLK_FREQM_REF			= 6,
	SAMD51_GCLK_SERCOM0_CORE		= 7,
	SAMD51_GCLK_SERCOM1_CORE		= 8,
	SAMD51_GCLK_TC0_TC1				= 9,
	SAMD51_GCLK_USB					= 10,
	SAMD51_GCLK_EVSYS0				= 11,
	SAMD51_GCLK_EVSYS1				= 12,
	SAMD51_GCLK_EVSYS2				= 13,
	SAMD51_GCLK_EVSYS3				= 14,
	SAMD51_GCLK_EVSYS4				= 15,
	SAMD51_GCLK_EVSYS5				= 16,
	SAMD51_GCLK_EVSYS6				= 17,
	SAMD51_GCLK_EVSYS7				= 18,
	SAMD51_GCLK_EVSYS8				= 19,
	SAMD51_GCLK_EVSYS9				= 20,
	SAMD51_GCLK_EVSYS10				= 21,
	SAMD51_GCLK_EVSYS11				= 22,
	SAMD51_GCLK_SERCOM2_CORE		= 23,
	SAMD51_GCLK_SERCOM3_CORE		= 24,
	SAMD51_GCLK_TCC0_TCC1			= 25,
	SAMD51_GCLK_TC2_TC3				= 26,
	SAMD51_GCLK_CAN0				= 27,
	SAMD51_GCLK_CAN1				= 28,
	SAMD51_GCLK_TCC2_TCC3			= 29,
	SAMD51_GCLK_TC4_TC5				= 30,
	SAMD51_GCLK_PDEC				= 31,
	SAMD51_GCLK_AC					= 32,
	SAMD51_GCLK_CCL					= 33,
	SAMD51_GCLK_SERCOM4_CORE		= 34,
	SAMD51_GCLK_SERCOM5_CORE		= 35,
	SAMD51_GCLK_SERCOM6_CORE		= 36,
	SAMD51_GCLK_SERCOM7_CORE		= 37,
	SAMD51_GCLK_TCC4				= 38,
	SAMD51_GCLK_TC6_TC7				= 39,
	SAMD51_GCLK_ADC0				= 40,
	SAMD51_GCLK_ADC1				= 41,
	SAMD51_GCLK_DAC					= 42,
	SAMD51_GCLK_I2S0				= 43,
	SAMD51_GCLK_I2S1				= 44,
	SAMD51_GCLK_SDHC0				= 45,
	SAMD51_GCLK_SDHC1				= 46,
	SAMD51_GCLK_CM4_TRACE			= 47
	
} SAMD51_PERIPHERAL_CHANNEL;




int samd51_gclk_configure_generator(uint8_t generator_id, SAMD51_GCLK_SRC src, uint16_t div, uint8_t run_standby, SAMD51_GCLK_DIV_MODE div_mode);
int samd51_gclk_configure_peripheral_channel(SAMD51_PERIPHERAL_CHANNEL channel, uint8_t generator_id);


#define SAMD51_MCLK_AHB				(0x10000000)
#define SAMD51_MCLK_APBA			(0x20000000)
#define SAMD51_MCLK_APBB			(0x30000000)
#define SAMD51_MCLK_APBC			(0x40000000)
#define SAMD51_MCLK_APBD			(0x50000000)
#define SAMD51_MCLK_BUS_MASK		(0xF0000000)

typedef enum SAMD51_MCLK_DEVICE_t
{
	SAMD51_AHB_NVMCTRL_CACHE			= (SAMD51_MCLK_AHB) | (1<<23),
	SAMD51_AHB_NVMCTRL_SMEEPROM			= (SAMD51_MCLK_AHB) | (1<<22),
	SAMD51_AHB_QSPI_2X					= (SAMD51_MCLK_AHB) | (1<<21),
	SAMD51_AHB_PUKCC					= (SAMD51_MCLK_AHB) | (1<<20),
	SAMD51_AHB_ICM						= (SAMD51_MCLK_AHB) | (1<<19),
	SAMD51_AHB_CANn1					= (SAMD51_MCLK_AHB) | (1<<18),
	SAMD51_AHB_CANn0					= (SAMD51_MCLK_AHB) | (1<<17),
	SAMD51_AHB_SDHCn1					= (SAMD51_MCLK_AHB) | (1<<16),
	SAMD51_AHB_SDHCn0					= (SAMD51_MCLK_AHB) | (1<<15),
	SAMD51_AHB_GMAC						= (SAMD51_MCLK_AHB) | (1<<14),
	SAMD51_AHB_QSPI						= (SAMD51_MCLK_AHB) | (1<<13),
	SAMD51_AHB_PAC						= (SAMD51_MCLK_AHB) | (1<<12),
	SAMD51_AHB_USB						= (SAMD51_MCLK_AHB) | (1<<10),
	SAMD51_AHB_DMAC						= (SAMD51_MCLK_AHB) | (1<<9),
	SAMD51_AHB_CMCC						= (SAMD51_MCLK_AHB) | (1<<8),
	SAMD51_AHB_NVCTRL					= (SAMD51_MCLK_AHB) | (1<<6),
	SAMD51_AHB_DSU						= (SAMD51_MCLK_AHB) | (1<<4),
	SAMD51_AHB_HPBn3					= (SAMD51_MCLK_AHB) | (1<<3),
	SAMD51_AHB_HPBn2					= (SAMD51_MCLK_AHB) | (1<<2),
	SAMD51_AHB_HPBn1					= (SAMD51_MCLK_AHB) | (1<<1),
	SAMD51_AHB_HPBn0					= (SAMD51_MCLK_AHB) | (1<<0),

	SAMD51_APBA_TCn1					= (SAMD51_MCLK_APBA) | (1<<15),
	SAMD51_APBA_TCn0					= (SAMD51_MCLK_APBA) | (1<<14),
	SAMD51_APBA_SERCOM1					= (SAMD51_MCLK_APBA) | (1<<13),
	SAMD51_APBA_SERCOM0					= (SAMD51_MCLK_APBA) | (1<<12),
	SAMD51_APBA_FREQM					= (SAMD51_MCLK_APBA) | (1<<11),
	SAMD51_APBA_EIC						= (SAMD51_MCLK_APBA) | (1<<10),
	SAMD51_APBA_RTC						= (SAMD51_MCLK_APBA) | (1<<9),
	SAMD51_APBA_WDT						= (SAMD51_MCLK_APBA) | (1<<8),
	SAMD51_APBA_GCLK					= (SAMD51_MCLK_APBA) | (1<<7),
	SAMD51_APBA_SUPC					= (SAMD51_MCLK_APBA) | (1<<6),
	SAMD51_APBA_OSC32KCTRL				= (SAMD51_MCLK_APBA) | (1<<5),
	SAMD51_APBA_OSCCTRL					= (SAMD51_MCLK_APBA) | (1<<4),
	SAMD51_APBA_RSTC					= (SAMD51_MCLK_APBA) | (1<<3),
	SAMD51_APBA_MCLK					= (SAMD51_MCLK_APBA) | (1<<2),
	SAMD51_APBA_PM						= (SAMD51_MCLK_APBA) | (1<<1),
	SAMD51_APBA_PAC						= (SAMD51_MCLK_APBA) | (1<<0),

	SAMD51_APBB_RAMECC					= (SAMD51_MCLK_APBB) | (1<<16),
	SAMD51_APBB_TCn3					= (SAMD51_MCLK_APBB) | (1<<14),
	SAMD51_APBB_TCn2					= (SAMD51_MCLK_APBB) | (1<<13),
	SAMD51_APBB_TCCn1					= (SAMD51_MCLK_APBB) | (1<<12),
	SAMD51_APBB_TCCn0					= (SAMD51_MCLK_APBB) | (1<<11),
	SAMD51_APBB_SERCOM3					= (SAMD51_MCLK_APBB) | (1<<10),
	SAMD51_APBB_SERCOM2					= (SAMD51_MCLK_APBB) | (1<<9),
	SAMD51_APBB_EVSYS					= (SAMD51_MCLK_APBB) | (1<<7),
	SAMD51_APBB_PORT					= (SAMD51_MCLK_APBB) | (1<<4),
	SAMD51_APBB_NVMCTRL					= (SAMD51_MCLK_APBB) | (1<<2),
	SAMD51_APBB_DSU						= (SAMD51_MCLK_APBB) | (1<<1),
	SAMD51_APBB_USB						= (SAMD51_MCLK_APBB) | (1<<0),

	SAMD51_APBC_CCL						= (SAMD51_MCLK_APBC) | (1<<14),
	SAMD51_APBC_QSPI					= (SAMD51_MCLK_APBC) | (1<<13),
	SAMD51_APBC_ICM						= (SAMD51_MCLK_APBC) | (1<<11),
	SAMD51_APBC_TRNG					= (SAMD51_MCLK_APBC) | (1<<10),
	SAMD51_APBC_AES						= (SAMD51_MCLK_APBC) | (1<<9),
	SAMD51_APBC_AC						= (SAMD51_MCLK_APBC) | (1<<8),
	SAMD51_APBC_PDEC					= (SAMD51_MCLK_APBC) | (1<<7),
	SAMD51_APBC_TCn5					= (SAMD51_MCLK_APBC) | (1<<6),
	SAMD51_APBC_TCn4					= (SAMD51_MCLK_APBC) | (1<<5),
	SAMD51_APBC_TCCn3					= (SAMD51_MCLK_APBC) | (1<<4),
	SAMD51_APBC_TCCn2					= (SAMD51_MCLK_APBC) | (1<<3),
	SAMD51_APBC_GMAC					= (SAMD51_MCLK_APBC) | (1<<2),

	SAMD51_APBD_PCC						= (SAMD51_MCLK_APBD) | (1<<11),
	SAMD51_APBD_I2S						= (SAMD51_MCLK_APBD) | (1<<10),
	SAMD51_APBD_DAC						= (SAMD51_MCLK_APBD) | (1<<9),
	SAMD51_APBD_ADCn1					= (SAMD51_MCLK_APBD) | (1<<8),
	SAMD51_APBD_ADCn0					= (SAMD51_MCLK_APBD) | (1<<7),
	SAMD51_APBD_TC7						= (SAMD51_MCLK_APBD) | (1<<6),
	SAMD51_APBD_TC6						= (SAMD51_MCLK_APBD) | (1<<5),
	SAMD51_APBD_TCC4					= (SAMD51_MCLK_APBD) | (1<<4),
	SAMD51_APBD_SERCOM7					= (SAMD51_MCLK_APBD) | (1<<3),
	SAMD51_APBD_SERCOM6					= (SAMD51_MCLK_APBD) | (1<<2),
	SAMD51_APBD_SERCOM5					= (SAMD51_MCLK_APBD) | (1<<1),
	SAMD51_APBD_SERCOM4					= (SAMD51_MCLK_APBD) | (1<<0)

} SAMD51_MCLK_DEVICE;


int samd51_mclk_enable(SAMD51_MCLK_DEVICE dev, uint8_t enable);


typedef enum SAMD51_OSC_REF_t
{
	SAMD51_OSC_REF_GCLK	= 0,
	SAMD51_OSC_REF_XOSC32 = 1,
	SAMD51_OSC_REF_XOSC0 = 2,
	SAMD51_OSC_REF_XOSC1 = 3
} SAMD51_OSC_REF;

typedef struct SAMD51_OSC_OPT_t
{
	uint8_t filter_en;
	uint8_t dco_filter;
	uint8_t filter;
	
	uint32_t xosc_div;
} SAMD51_OSC_OPT;

int samd51_oscillator_dpll_enable(int index, SAMD51_OSC_REF ref, uint32_t ref_clk_freq_hz, uint32_t output_freq_hz, SAMD51_OSC_OPT *opt);


#endif /* SAMD51_CLOCK_H_ */